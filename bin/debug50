#!/bin/bash

# check args
if [ $# -lt 1 ]; then
    echo "Usage: $0 <executable|python script> [arguments]"
    exit 1
fi

# set c9 bin path for online/offline
if [ ${IDE_OFFLINE+x} ]; then
    C9="/var/c9sdk/bin/c9"
else
    C9="/mnt/shared/sbin/c9"
fi

# allow force-stopping
# TODO get rid of -HUP
# if [ "$1" = "-HUP" ]; then
#     $C9 exec gdb50forcestop
#     exit 0
# fi

if ! [ -f "$1" ]; then
    echo -n "debug50: $1: "
    if [ -d "$1" ]; then
        echo "Not a file"
    else
        echo "No such file"
    fi

    exit 1
fi

# PID of current execution
PID=$$

# ensure file is executable and debuggable
# http://stackoverflow.com/a/10319835/1797347
# http://stackoverflow.com/a/12801855/1797347
if [ $(file "$1" | grep -o executable) ]; then
    if ! [ "$(readelf -wL "$1")" ]; then
        echo "Can't debug this program! Are you sure you compiled it with -ggdb?"
        exit 1
    fi

    # get source files from gdb
    sources=$(gdb -q "$1" <<EOF
info sources
EOF
)
    sources=$(echo "$sources" | grep -Eo "/.*\.c,?")
    breakpoint=false
    IFS=$'\n'
    for f in ${sources//,/}
    do
        # ensure executable is more recent than source and header files
        if [ "$f" -nt "$1" ]; then
            echo "Looks like you've changed your code. Recompile and then re-run debug50!"
            exit 1
        fi

        # check for breakpoints in current source file
        if [ "$breakpoint" = false ]; then
            if [ -z "$($C9 exec  breakpoint_set "$f")" ]; then
                breakpoint=true
            fi
        fi
    done

    # use default value for IFS
    unset IFS

    # no breakpoints found
    if [ "$breakpoint" = false ]; then
        echo "Looks like you haven't set any breakpoints. Set at least one breakpoint by clicking to the left of a line number and then re-run debug50!"
        exit 1
    fi

    # SIGUSR1 signals to begin the shim
    SHIM="/home/ubuntu/.c9/bin/c9gdbshim.js"
    trap "node $SHIM --debug=1 $*; $C9 exec stopDebugger $PID; echo; exit 0" SIGUSR1

    # give PID to proxy for monitoring
    ERR=$($C9 exec startDebugger gdb $PID)

# script with .py extension or python shebang
elif [[ "$1" = *.py || $(head --lines=1 "$1") =~ ^#!.*python.*$ ]]; then
    trap "python -m ikp3db --ikpdb-port=15471 --ikpdb-working-directory='$(pwd)' $*; $C9 exec stopDebugger $PID; echo; exit 0" SIGUSR1

    # give PID to proxy for monitoring
    ERR=$($C9 exec startDebugger ikp3db $PID)
fi

# c9 exec doesn't return non-zero on error!
if [ "$ERR" = "Could not execute startDebugger" ]; then
    echo "Unable to start!"
    exit 1
fi

# wait 5 minutes to start or quit this process
DELAY=300
while [ $DELAY -gt 0 ]; do sleep 1; DELAY=$((DELAY-1)); done
