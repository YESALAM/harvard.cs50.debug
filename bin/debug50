#!/bin/bash

# check args
if [ $# -lt 1 ]; then
    echo "Usage: $0 executable [arguments]"
    exit 1
fi

# set c9 bin path for online/offline
if [ ${IDE_OFFLINE+x} ]; then
    C9="/var/c9sdk/bin/c9"
else
    C9="/mnt/shared/sbin/c9"
fi

# allow force-stopping
if [ "$1" = "-HUP" ]; then
    $C9 exec gdb50forcestop
    exit 0
fi

if ! [ -f "$1" ]; then
    echo -n "debug50: $1: "
    if [ -d "$1" ]; then
        echo "Not a file"
    else
        echo "No such file"
    fi

    exit 1
fi

# ensure file is executable and debuggable
# http://stackoverflow.com/a/10319835/1797347
# http://stackoverflow.com/a/12801855/1797347
if ! [ $(file "$1" | grep -o executable) ]; then
    echo "Can't debug this program! Afraid debug50 only supports compiled C programs!"
    exit 1
elif ! [ "$(readelf -wL "$1")" ]; then
    echo "Can't debug this program! Are you sure you compiled it with -ggdb?"
    exit 1
fi

# get source and header files from gdb
sources=$(gdb -q "$1" <<EOF
info sources
EOF
)

sources=$(echo "$sources" | grep -Eo "/.*\.c,?")

# ensure executable is more recent than source and header files
breakpoint=false
IFS=$'\n'
for f in ${sources//,/}
do
    if [ "$f" -nt "$1" ]; then
        echo "Looks like you've changed your code. Recompile and then re-run debug50!"
        exit 1
    fi

    # check if any breakpoints are set in current source file
    if [ "$breakpoint" = false ]; then
        if [ -z "$($C9 exec  breakpoint_set "$f")" ]; then
            breakpoint=true
        fi
    fi
done

# use default value for IFS
unset IFS

if [ "$breakpoint" = false ]; then
    echo "Looks like you haven't set any breakpoints. Set at least one breakpoint by clicking to the left of a line number and then re-run debug50!"
    exit 1
fi

# PID of current execution
PID=$$

# SIGUSR1 signals to begin the shim
SHIM="/home/ubuntu/.c9/bin/c9gdbshim.js"
trap "node $SHIM --debug=1 $*; $C9 exec gdb50stop $PID; echo; exit 0" SIGUSR1

# give PID to proxy for monitoring
ERR="$($C9 exec gdb50start $PID)"

# c9 exec doesn't return non-zero on error!
if [ "$ERR" = "Could not execute gdb50start" ]; then
    echo "Unable to start!"
    exit 1
fi

# wait 5 minutes to start or quit this process
DELAY=300
while [ $DELAY -gt 0 ]; do sleep 1; DELAY=$((DELAY-1)); done
